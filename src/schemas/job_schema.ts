import { z } from 'zod';
import {NumberSetInfiniteSchema, ExitCodeSchema, MetaSchema, ErrorsSchema, WarningsSchema} from './common_schema';

export const JobResourcesSchema = z.object({
    nodes: z.object({
      count: z.number(),
      select_type: z.array(z.string()),
      whole: z.boolean(),
      list: z.string(),
      allocation: z.array(z.object({
        memory: z.object({
          used: z.number(),
          allocated: z.number(),
        }),
        cpus: z.object({
          count: z.number(),
          used: z.number(),
        }),
        name: z.string(),
        index: z.number(),
        sockets: z.array(z.object({
          cores: z.array(z.object({
            index: z.number(),
            status: z.array(z.string()),
          })),
          index: z.number(),
        })),
      })),
    }).optional(),
    threads_per_core: NumberSetInfiniteSchema.optional(),
    cpus: z.number().optional(),
    select_type: z.array(z.string()).optional(),
  });

export const JobSchema = z.object({
    container: z.string(),
    cluster: z.string(),
    time_minimum: NumberSetInfiniteSchema,
    memory_per_tres: z.string(),
    scheduled_nodes: z.string(),
    minimum_switches: z.number(),
    qos: z.string(),
    resize_time: NumberSetInfiniteSchema,
    eligible_time: NumberSetInfiniteSchema,
    exclusive: z.array(z.string()),
    cpus_per_tres: z.string(),
    preemptable_time: NumberSetInfiniteSchema,
    tasks: NumberSetInfiniteSchema,
    system_comment: z.string(),
    federation_siblings_active: z.string(),
    tasks_per_tres: NumberSetInfiniteSchema,
    tasks_per_core: NumberSetInfiniteSchema,
    accrue_time: NumberSetInfiniteSchema,
    dependency: z.string(),
    group_name: z.string(),
    profile: z.array(z.string()),
    priority: NumberSetInfiniteSchema,
    tres_per_job: z.string(),
    failed_node: z.string(),
    derived_exit_code: ExitCodeSchema,
    maximum_switch_wait_time: z.number(),
    core_spec: z.number(),
    mcs_label: z.string(),
    required_nodes: z.string(),
    tres_bind: z.string(),
    user_id: z.number(),
    selinux_context: z.string(),
    exit_code: ExitCodeSchema,
    federation_origin: z.string(),
    container_id: z.string(),
    shared: z.array(z.string()),
    tasks_per_board: NumberSetInfiniteSchema,
    user_name: z.string(),
    flags: z.array(z.string()),
    standard_input: z.string(),
    admin_comment: z.string(),
    cores_per_socket: NumberSetInfiniteSchema,
    job_state: z.array(z.string()),
    tasks_per_node: NumberSetInfiniteSchema,
    current_working_directory: z.string(),
    standard_error: z.string(),
    array_job_id: NumberSetInfiniteSchema,
    cluster_features: z.string(),
    partition: z.string(),
    threads_per_core: NumberSetInfiniteSchema,
    tres_alloc_str: z.string(),
    memory_per_cpu: NumberSetInfiniteSchema,
    cpu_frequency_minimum: NumberSetInfiniteSchema,
    node_count: NumberSetInfiniteSchema,
    power: z.object({
      flags: z.array(z.string()),
    }),
    deadline: NumberSetInfiniteSchema,
    mail_type: z.array(z.string()),
    memory_per_node: NumberSetInfiniteSchema,
    state_reason: z.string(),
    het_job_offset: NumberSetInfiniteSchema,
    end_time: NumberSetInfiniteSchema,
    sockets_per_board: z.number(),
    nice: z.number(),
    last_sched_evaluation: NumberSetInfiniteSchema,
    tres_per_node: z.string(),
    burst_buffer: z.string(),
    licenses: z.string(),
    excluded_nodes: z.string(),
    array_max_tasks: NumberSetInfiniteSchema,
    het_job_id: NumberSetInfiniteSchema,
    sockets_per_node: NumberSetInfiniteSchema,
    prefer: z.string(),
    time_limit: NumberSetInfiniteSchema,
    minimum_cpus_per_node: NumberSetInfiniteSchema,
    tasks_per_socket: NumberSetInfiniteSchema,
    batch_host: z.string(),
    max_cpus: NumberSetInfiniteSchema,
    job_size_str: z.array(z.string()),
    hold: z.boolean(),
    cpu_frequency_maximum: NumberSetInfiniteSchema,
    features: z.string(),
    het_job_id_set: z.string(),
    state_description: z.string(),
    show_flags: z.array(z.string()),
    array_task_id: NumberSetInfiniteSchema,
    minimum_tmp_disk_per_node: NumberSetInfiniteSchema,
    tres_req_str: z.string(),
    burst_buffer_state: z.string(),
    cron: z.string(),
    allocating_node: z.string(),
    tres_per_socket: z.string(),
    array_task_string: z.string(),
    submit_time: NumberSetInfiniteSchema,
    oversubscribe: z.boolean(),
    wckey: z.string(),
    max_nodes: NumberSetInfiniteSchema,
    batch_flag: z.boolean(),
    start_time: NumberSetInfiniteSchema,
    name: z.string(),
    preempt_time: NumberSetInfiniteSchema,
    contiguous: z.boolean(),
    job_resources: JobResourcesSchema.optional(),
    billable_tres: NumberSetInfiniteSchema.extend({
      number: z.number(),
    }),
    federation_siblings_viable: z.string(),
    cpus_per_task: NumberSetInfiniteSchema,
    batch_features: z.string(),
    thread_spec: z.number(),
    cpu_frequency_governor: NumberSetInfiniteSchema,
    gres_detail: z.array(z.string()),
    network: z.string(),
    restart_cnt: z.number(),
    resv_name: z.string(),
    extra: z.string(),
    delay_boot: NumberSetInfiniteSchema,
    reboot: z.boolean(),
    cpus: NumberSetInfiniteSchema,
    standard_output: z.string(),
    pre_sus_time: NumberSetInfiniteSchema,
    suspend_time: NumberSetInfiniteSchema,
    association_id: z.number(),
    command: z.string(),
    tres_freq: z.string(),
    requeue: z.boolean(),
    tres_per_task: z.string(),
    mail_user: z.string(),
    nodes: z.string(),
    group_id: z.number(),
    job_id: z.number(),
    comment: z.string(),
    account: z.string(),
  });

export const SlurmJobResponseSchema = z.object({
    last_backfill: NumberSetInfiniteSchema,
    last_update: NumberSetInfiniteSchema,
    meta: MetaSchema,
    jobs: z.array(JobSchema),
    errors: z.array(ErrorsSchema).optional(),
    warnings: z.array(WarningsSchema).optional(),
  });