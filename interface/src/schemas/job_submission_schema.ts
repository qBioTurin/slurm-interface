import { z } from 'zod';

export const JobSubmissionSchema = z.object({
  tasks: z.number().min(1, 'Number of tasks is required'),
  name: z.string().min(1, 'Job name is required'),
  nodes: z.string(),
  current_working_directory: z.string(),
  environment: z.string().optional(), //the actual json type is an array of strings, this is for validating the form only
  script: z.string().min(1, 'Script is required'),
  description: z.string().optional(),
  partition: z.string().optional(),
  required_nodes: z.array(z.string()).optional(),
  reservation: z.string().optional(),
  // immediate: z.boolean().optional(),
  // tmp_disk_space: z.number().optional(),
  // min_memory_per_cpu: z.number().optional(),
  // cpus_per_task: z.number().optional(),
  // tasks_per_node: z.number().optional(),
});

// https://slurm.schedmd.com/rest_api.html#v0.0.42_job_desc_msg
// const JobDescSchema = z.object({
//   account: z.string().optional(),
//   account_gather_frequency: z.string().optional(),
//   admin_comment: z.string().optional(),
//   allocation_node_list: z.string().optional(),
//   allocation_node_port: z.number().int().optional(),
//   argv: z.array(z.string()).optional(),
//   array: z.string().optional(),
//   batch_features: z.string().optional(),
//   begin_time: z.string().optional(), //fix time format if you want to use it
//   flags: z.array(z.string()).optional(),
//   burst_buffer: z.string().optional(),
//   clusters: z.string().optional(),
//   cluster_constraint: z.string().optional(),
//   comment: z.string().optional(),
//   contiguous: z.boolean().optional(),
//   container: z.string().optional(),
//   container_id: z.string().optional(),
//   core_specification: z.number().int().optional(),
//   thread_specification: z.number().int().optional(),
//   cpu_binding: z.string().optional(),
//   cpu_binding_flags: z.array(z.string()).optional(),
//   cpu_frequency: z.string().optional(),
//   cpus_per_tres: z.string().optional(),
//   crontab: z.string().optional(),
//   deadline: z.number().int().optional(),
//   delay_boot: z.number().int().optional(),
//   dependency: z.string().optional(),
//   end_time: z.number().int().optional(),
//   environment: z.array(z.string()).optional(),
//   rlimits: z.string().optional(),
//   excluded_nodes: z.array(z.string()).optional(),
//   extra: z.string().optional(),
//   constraints: z.string().optional(),
//   group_id: z.string().optional(),
//   hetjob_group: z.number().int().optional(),
//   immediate: z.boolean().optional(),
//   job_id: z.number().int().optional(),
//   kill_on_node_fail: z.boolean().optional(),
//   licenses: z.string().optional(),
//   mail_type: z.array(z.string()).optional(),
//   mail_user: z.string().optional(),
//   mcs_label: z.string().optional(),
//   memory_binding: z.string().optional(),
//   memory_binding_type: z.array(z.string()).optional(),
//   memory_per_tres: z.string().optional(),
//   name: z.string().optional(),
//   network: z.string().optional(),
//   nice: z.number().int().optional(),
//   tasks: z.number().int().optional(),
//   oom_kill_step: z.number().int().optional(),
//   open_mode: z.array(z.string()).optional(),
//   reserve_ports: z.number().int().optional(),
//   overcommit: z.boolean().optional(),
//   partition: z.string().optional(),
//   distribution_plane_size: z.string().optional(),
//   power_flags: z.array(z.unknown()).optional(),  // can be refined if more info is given
//   prefer: z.string().optional(),
//   hold: z.boolean().optional(),
//   priority: z.number().int().optional(),
//   profile: z.array(z.string()).optional(),
//   qos: z.string().optional(),
//   reboot: z.boolean().optional(),
//   required_nodes: z.array(z.string()).optional(),
//   requeue: z.boolean().optional(),
//   reservation: z.string().optional(),
//   script: z.string().optional(),
//   shared: z.array(z.string()).optional(),
//   site_factor: z.number().int().optional(),
//   spank_environment: z.array(z.string()).optional(),
//   distribution: z.string().optional(),
//   time_limit: z.number().int().optional(),
//   time_minimum: z.number().int().optional(),
//   tres_bind: z.string().optional(),
//   tres_freq: z.string().optional(),
//   tres_per_job: z.string().optional(),
//   tres_per_node: z.string().optional(),
//   tres_per_socket: z.string().optional(),
//   tres_per_task: z.string().optional(),
//   user_id: z.string().optional(),
//   wait_all_nodes: z.boolean().optional(),
//   kill_warning_flags: z.array(z.string()).optional(),
//   kill_warning_signal: z.string().optional(),
//   kill_warning_delay: z.string().optional(),
//   current_working_directory: z.string().optional(),
//   cpus_per_task: z.number().int().optional(),
//   minimum_cpus: z.number().int().optional(),
//   maximum_cpus: z.number().int().optional(),
//   nodes: z.string().optional(),
//   minimum_nodes: z.number().int().optional(),
//   maximum_nodes: z.number().int().optional(),
//   minimum_boards_per_node: z.number().int().optional(),
//   minimum_sockets_per_board: z.number().int().optional(),
//   sockets_per_node: z.number().int().optional(),
//   threads_per_core: z.number().int().optional(),
//   tasks_per_node: z.number().int().optional(),
//   tasks_per_socket: z.number().int().optional(),
//   tasks_per_core: z.number().int().optional(),
//   tasks_per_board: z.number().int().optional(),
//   ntasks_per_tres: z.number().int().optional(),
//   minimum_cpus_per_node: z.number().int().optional(),
//   memory_per_cpu: z.string().optional(),
//   memory_per_node: z.string().optional(),
//   temporary_disk_per_node: z.number().int().optional(),
//   selinux_context: z.string().optional(),
//   required_switches: z.string().optional(),
//   segment_size: z.string().optional(),
//   standard_error: z.string().optional(),
//   standard_input: z.string().optional(),
//   standard_output: z.string().optional(),
//   wait_for_switch: z.number().int().optional(),
//   wckey: z.string().optional(),
//   x11: z.array(z.string()).optional(),
//   x11_magic_cookie: z.string().optional(),
//   x11_target_host: z.string().optional(),
//   x11_target_port: z.number().int().optional(),
// });
